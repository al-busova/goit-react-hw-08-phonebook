{"version":3,"file":"static/js/918.78c85752.chunk.js","mappings":"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","sources":["components/Box.jsx","redux/contacts/selectorsContacts.js","components/FormContacts/FormContacts.jsx","components/Contacts/Contacts.styled.js","components/Contacts/ContactItem.jsx","components/Contacts/ContactsList.jsx","components/Filter/FilterContacts.jsx","pages/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { color, space, layout, typography } from 'styled-system';\n\nexport const Box = styled.div`\n${color}\n${space}\n${layout}\n${typography}\n`;","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { Button, Input, Label } from '../commonStyles';\nimport { FormSimple } from '../commonStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectorsContacts';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nexport const FormContacts = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [isAddOn, setIsAddOn] = useState(false);\n  const contactItems = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const telId = nanoid();\n\n  useEffect(() => {\n    setIsAddOn(false);\n  }, [contactItems]);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isDuplicate = contactItems.find(\n      contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n    if (isDuplicate) {\n      toast.error(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    toast('Contact added.');\n    setIsAddOn(true);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormSimple onSubmit={handleSubmit}>\n      <h2>New contact</h2>\n      <Label htmlFor={nameId}>\n        <span>Name</span>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id={nameId}\n          value={name}\n          placeholder=\"Enter name\"\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label htmlFor={telId}>\n        <span>Number</span>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          id={telId}\n          value={number}\n          placeholder=\"Enter number\"\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">\n        {isAddOn && isLoading ? <>Loading...</> : <>Add contact</>}\n      </Button>\n    </FormSimple>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ListContacts = styled.ul`\nlist-style: none;\npadding: 0 ${props => props.theme.space[4]}px;\n`;\n\nexport const ItemContacts = styled.li`\ndisplay: flex;\njustify-content: space-between;\npadding: ${props => props.theme.space[3]}px;\noutline: ${props => `1px solid ${props.theme.colors.darkgreen}`};\nbutton {\n    font-size: ${props => props.theme.fontSizes.s}px;\n    padding: ${props => props.theme.space[3]}px;\n}\n`;\n\nexport const WrapperContact = styled.div`\ndisplay: flex;\ngap: ${props => props.theme.space[3]}px;\nwidth: 100%;\nfont-size: ${props => props.theme.fontSizes.m}px;\n`;\n\nexport const NameContact = styled.span`\nwidth: 50%;\npadding-left: ${props => props.theme.space[3]}px;\ntext-align: left;\n`;","import PropTypes from 'prop-types';\nimport { Button } from 'components/commonStyles';\nimport { WrapperContact, NameContact } from './Contacts.styled';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectorsContacts';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <WrapperContact>\n        <NameContact>{name}: </NameContact>\n        <span>{number}</span>\n      </WrapperContact>\n      <Button\n        type=\"button\"\n        onClick={() => {\n          setIsDeleting(true);\n          dispatch(deleteContact(id));\n          toast('Contact deleted.');\n        }}\n      >\n        {isLoading && isDeleting ? <>Loading...</> : <>Delete</>}\n      </Button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { ContactItem } from './ContactItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts/selectorsContacts';\nimport { ListContacts, ItemContacts } from './Contacts.styled';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectIsLoggedIn } from 'redux/auth/selectorsAuth';\n\nexport const ContactList = () => {\n  const contactItems = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    dispatch(fetchContacts());\n  }, [isLoggedIn, dispatch]);\n\n  const getFilterContacts = () => {\n    if (!filter) {\n      return contactItems;\n    }\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filterContacts = contactItems.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return filterContacts;\n  };\n  const filteredContacts = getFilterContacts();\n\n  return (\n    <>\n      {isLoading && contactItems.length === 0 && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {contactItems.length > 0 && (\n        <ListContacts>\n          {filteredContacts.map(contact => (\n            <ItemContacts key={contact.id}>\n              <ContactItem\n                name={contact.name}\n                number={contact.number}\n                id={contact.id}\n              />\n            </ItemContacts>\n          ))}\n        </ListContacts>\n      )}\n    </>\n  );\n};\n","import { Label, Input } from '../commonStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectorsContacts';\nimport { getContactsFilter } from 'redux/contacts/filterSlice';\n\nexport const FilterContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    if (e.target.name === 'filter') {\n      dispatch(getContactsFilter(e.target.value));\n    }\n  };\n\n  return (\n    <>\n      <Label htmlFor=\"filter\">\n        <span>Filter contacts by name</span>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          id=\"filter\"\n          value={filter}\n          onChange={handleChange}\n        />{' '}\n      </Label>\n    </>\n  );\n};\n","import { FormContacts } from '../components/FormContacts/FormContacts';\nimport { ContactList } from 'components/Contacts/ContactsList';\nimport { FilterContacts } from 'components/Filter/FilterContacts';\nimport { Box } from '../components/Box';\n\nconst ContactsPage = () => {\n  return (\n    <main>\n      <FormContacts />\n      <Box\n        color=\"darkgreen\"\n        mr=\"auto\"\n        ml=\"auto\"\n        width=\"55%\"\n        fontSize=\"m\"\n        textAlign=\"center\"\n      >\n        <h2>Contacts</h2>\n        <FilterContacts />\n        <ContactList />\n      </Box>\n    </main>\n  );\n};\nexport default ContactsPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Box","styled","color","space","layout","typography","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","FormContacts","useState","name","setName","number","setNumber","isAddOn","setIsAddOn","contactItems","useSelector","dispatch","useDispatch","nameId","nanoid","telId","useEffect","handleChange","e","target","value","onSubmit","preventDefault","find","contact","toLocaleLowerCase","toast","addContact","htmlFor","type","id","placeholder","onChange","pattern","title","required","ListContacts","props","theme","ItemContacts","colors","darkgreen","fontSizes","s","WrapperContact","m","NameContact","ContactItem","isDeleting","setIsDeleting","onClick","deleteContact","ContactList","isLoggedIn","selectIsLoggedIn","fetchContacts","filteredContacts","normalizedFilter","includes","getFilterContacts","length","map","FilterContacts","getContactsFilter","mr","ml","width","fontSize","textAlign","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}