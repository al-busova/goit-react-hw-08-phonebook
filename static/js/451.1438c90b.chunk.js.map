{"version":3,"file":"static/js/451.1438c90b.chunk.js","mappings":"sNAoEA,UA7DsB,WACpB,IAAMA,GAAYC,EAAAA,EAAAA,MACZC,GAAaD,EAAAA,EAAAA,MACVE,GAAgBF,EAAAA,EAAAA,MAChBG,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MAEXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGC,IAAI,IAAIJ,aAoBxC,OACE,2BACE,SAAC,KAAD,CACEK,cApBgB,CACpBN,KAAM,GACNE,MAAO,GACPC,SAAU,IAkBNI,iBAAkBV,EAClBW,SAhBe,SAACC,EAAQC,GAC5Bf,GACEgB,EAAAA,EAAAA,IAAa,CACXX,KAAMS,EAAOT,KACbE,MAAOO,EAAOP,MACdC,SAAUM,EAAON,YAGrBO,EAAQE,YACRC,QAAQC,IAAIL,EACb,EAGG,UAKE,UAAC,KAAD,CAAMM,aAAa,MAAnB,WACE,mBAAOC,QAAS5B,EAAhB,kBAEE,SAAC,KAAD,CAAO6B,GAAI7B,EAAW8B,KAAK,OAAOlB,KAAK,OAAOmB,YAAa,iBAC3D,SAAC,KAAD,CAAcnB,KAAK,aAGrB,mBAAOgB,QAAS1B,EAAhB,mBAEE,SAAC,KAAD,CAAO2B,GAAI3B,EAAY4B,KAAK,QAAQlB,KAAK,QAAQmB,YAAa,iBAC9D,SAAC,KAAD,CAAcnB,KAAK,QAAQoB,UAAU,YAGvC,mBAAOJ,QAASzB,EAAhB,sBAEE,SAAC,KAAD,CAAO0B,GAAI1B,EAAe2B,KAAK,WAAWlB,KAAK,WAAWmB,YAAa,qBACvE,SAAC,KAAD,CAAcnB,KAAK,iBAErB,mBAAQkB,KAAK,SAAb,SAAuB1B,GAAY,8CAAkB,uJAK9D,C","sources":["pages/Registration.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registration } from 'redux/auth/authOperations';\nimport { selectIsLoadingAuth } from 'redux/auth/selectorsAuth';\n\n const Registration = () => {\n  const nameIdReg = nanoid();\n  const emailIdReg = nanoid();\n     const passwordIdReg = nanoid();\n     const isLoading = useSelector(selectIsLoadingAuth);\n  const dispatch = useDispatch();\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().min(7).max(16).required(),\n  });\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    dispatch(\n      registration({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    );\n    actions.resetForm();\n    console.log(values);\n  };\n  return (\n    <main>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <label htmlFor={nameIdReg}>\n            Name\n            <Field id={nameIdReg} type=\"text\" name=\"name\" placeholder ='create name' />\n            <ErrorMessage name=\"name\" />\n          </label>\n\n          <label htmlFor={emailIdReg}>\n            Email\n            <Field id={emailIdReg} type=\"email\" name=\"email\" placeholder ='enter email' />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </label>\n\n          <label htmlFor={passwordIdReg}>\n            Password\n            <Field id={passwordIdReg} type=\"password\" name=\"password\" placeholder ='create password'  />\n            <ErrorMessage name=\"password\" />\n          </label>\n          <button type=\"submit\">{isLoading ? <>Loading...</> : <>Зарегестрироваться</>}</button>\n        </Form>\n      </Formik>\n    </main>\n  );\n};\nexport default Registration;"],"names":["nameIdReg","nanoid","emailIdReg","passwordIdReg","isLoading","useSelector","selectIsLoadingAuth","dispatch","useDispatch","schema","yup","shape","name","required","email","password","min","max","initialValues","validationSchema","onSubmit","values","actions","registration","resetForm","console","log","autoComplete","htmlFor","id","type","placeholder","component"],"sourceRoot":""}