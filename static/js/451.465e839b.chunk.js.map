{"version":3,"file":"static/js/451.465e839b.chunk.js","mappings":"gOAyFA,UA3EqB,WACnB,IAAMA,GAAYC,EAAAA,EAAAA,MACZC,GAAaD,EAAAA,EAAAA,MACbE,GAAgBF,EAAAA,EAAAA,MAChBG,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MAEXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGC,IAAI,IAAIJ,aAmBxC,OACE,2BACE,SAAC,KAAD,CACEK,cAnBgB,CACpBN,KAAM,GACNE,MAAO,GACPC,SAAU,IAiBNI,iBAAkBV,EAClBW,SAfe,SAAC,GAA+B,IAA7BR,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACnCR,GACEc,EAAAA,EAAAA,IAAa,CACXT,KAAAA,EACAE,MAAAA,EACAC,SAAAA,IAGL,EAIG,UAKE,UAAC,KAAD,CAAYO,aAAa,MAAzB,WACE,UAAC,KAAD,CAAOC,QAASvB,EAAhB,WACE,oCACA,SAAC,KAAD,CACEwB,GAAIxB,EACJyB,KAAK,OACLb,KAAK,OACLc,YAAY,oBAGhB,SAAC,IAAD,CAAWd,KAAK,OAAOe,UAAU,OACjC,UAAC,KAAD,CAAOJ,QAASrB,EAAhB,WACE,qCACA,SAAC,KAAD,CACEsB,GAAItB,EACJuB,KAAK,QACLb,KAAK,QACLc,YAAY,yBAGhB,SAAC,IAAD,CAAWd,KAAK,QAAQe,UAAU,OAClC,UAAC,KAAD,CAAOJ,QAASpB,EAAhB,WACE,wCACA,SAAC,KAAD,CACEqB,GAAIrB,EACJsB,KAAK,WACLb,KAAK,WACLc,YAAY,wBAGhB,SAAC,IAAD,CAAWd,KAAK,WAAWe,UAAU,OACrC,SAAC,KAAD,CAAQF,KAAK,SAAb,SACGrB,GAAY,8CAAkB,mDAM1C,C","sources":["pages/Registration.jsx"],"sourcesContent":["import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registration } from 'redux/auth/authOperations';\nimport { selectIsLoadingAuth } from 'redux/auth/selectorsAuth';\nimport {\n  Label,\n  Button,\n  FormFormik,\n  InputFormik,\n  ErrorText,\n} from 'components/commonStyles';\n\nconst Registration = () => {\n  const nameIdReg = nanoid();\n  const emailIdReg = nanoid();\n  const passwordIdReg = nanoid();\n  const isLoading = useSelector(selectIsLoadingAuth);\n  const dispatch = useDispatch();\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().min(7).max(16).required(),\n  });\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = ({ name, email, password }) => {\n    dispatch(\n      registration({\n        name,\n        email,\n        password,\n      })\n    );\n  };\n\n  return (\n    <main>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormFormik autoComplete=\"off\">\n          <Label htmlFor={nameIdReg}>\n            <span>Name</span>\n            <InputFormik\n              id={nameIdReg}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Create name\"\n            />\n          </Label>\n          <ErrorText name=\"name\" component=\"p\" />\n          <Label htmlFor={emailIdReg}>\n            <span>Email</span>\n            <InputFormik\n              id={emailIdReg}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter your email\"\n            />\n          </Label>\n          <ErrorText name=\"email\" component=\"p\" />\n          <Label htmlFor={passwordIdReg}>\n            <span>Password</span>\n            <InputFormik\n              id={passwordIdReg}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Create password\"\n            />\n          </Label>\n          <ErrorText name=\"password\" component=\"p\" />\n          <Button type=\"submit\">\n            {isLoading ? <>Loading...</> : <>Register</>}\n          </Button>\n        </FormFormik>\n      </Formik>\n    </main>\n  );\n};\nexport default Registration;\n"],"names":["nameIdReg","nanoid","emailIdReg","passwordIdReg","isLoading","useSelector","selectIsLoadingAuth","dispatch","useDispatch","schema","yup","shape","name","required","email","password","min","max","initialValues","validationSchema","onSubmit","registration","autoComplete","htmlFor","id","type","placeholder","component"],"sourceRoot":""}